"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_type_of_1 = __importDefault(require("is-type-of"));
const ramda_1 = require("ramda");
const validator_1 = __importDefault(require("validator"));
const cRequired = (input, expect = {}) => {
    if (expect.required && input === undefined) {
        return { is: false };
    }
    return { is: true, val: input };
};
const cNullable = (input, expect = {}) => {
    if (expect.nullable && is_type_of_1.default.null(input)) {
        return { is: true, val: input };
    }
    return { is: false, val: input };
};
const cEnum = (input, expect = {}) => {
    if (Array.isArray(expect.enum) && expect.enum.length) {
        return expect.enum.includes(input)
            ? { is: true, val: input }
            : { is: false };
    }
    return { is: true, val: input };
};
const cDefault = (input, expect = {}) => expect.default !== undefined && input === undefined
    ? { is: true, val: expect.default }
    : { is: true, val: input };
const cString = (val, expect) => {
    if (!cRequired(val, expect).is)
        return { is: false };
    if (expect.enum && !cEnum(val, expect).is)
        return { is: false };
    if (expect.format && !cFormat(val, expect).is)
        return { is: false };
    return typeof val === 'string'
        ? { is: true, val: String(val) }
        : { is: false };
};
const cFormat = (val, expect) => {
    if (expect.format === 'email' && !validator_1.default.isEmail(val))
        return { is: false };
    if (expect.format === 'uuid' && !validator_1.default.isUUID(val))
        return { is: false };
    if ((expect.format === 'date' || expect.format === 'date-time') && !validator_1.default.isRFC3339(val))
        return { is: false };
    if (expect.format === 'byte' && !validator_1.default.isBase64(val))
        return { is: false };
    if (expect.format === 'ipv4' && !validator_1.default.isIP(val, 4))
        return { is: false };
    if (expect.format === 'ipv6' && !validator_1.default.isIP(val, 6))
        return { is: false };
    return { is: true, val: String(val) };
};
const cNum = (val, expect) => {
    if (!cRequired(val, expect).is)
        return { is: false };
    if (expect.enum && !cEnum(Number(val), expect).is)
        return { is: false };
    if (isNaN(Number(val)) || val === '')
        return { is: false };
    if (expect.minimum && expect.minimum > Number(val))
        return { is: false };
    if (expect.maximum && expect.maximum < Number(val))
        return { is: false };
    return { is: true, val: Number(val) };
};
const cBool = (val, expect) => {
    if (!cRequired(val, expect).is)
        return { is: false };
    const condition = (0, ramda_1.cond)([
        [(0, ramda_1.equals)('true'), (0, ramda_1.always)({ is: true, val: true })],
        [(0, ramda_1.equals)('false'), (0, ramda_1.always)({ is: true, val: false })],
        [ramda_1.T, (0, ramda_1.always)({ is: typeof val === 'boolean', val })]
    ]);
    return condition(val);
};
// /**
//  * 对 Object 做检验, 支持嵌套数据
// {
//   aaaa: 'hh',
//   bbbb: 'qq',
// }
// { // expect:
//   type: 'object',
//   properties: {
//     aaaa: { type: 'string', example: 'http://www.baidu.com', required: true },
//     bbbb: { type: 'string', example: 'Bob' }
//     c: { type: 'object', properties: {ii: {type: 'string'}, jj: {type: 'number'}} }
//   }
// }
//  */
const cObject = (input, expect = {}) => {
    if (!cRequired(input, expect).is)
        return { is: false };
    const res = { is: true, val: input };
    if (!is_type_of_1.default.object(input))
        return { is: false };
    if (!expect.properties)
        return res;
    for (const key of Object.keys(expect.properties)) {
        // ignore empty key if not required
        if (!expect.properties[key].required && input[key] === undefined) {
            continue; // eslint-disable-line
        }
        const { is, val } = check(input[key], expect.properties[key]);
        if (!is) {
            console.log('error object properties:', key); // TODO need to update error debug info
            res.is = false;
            break;
        }
        input[key] = is ? val : input[key];
    }
    return res;
};
// {
//   type: 'array', required: true, items: 'string', example: ['填写内容']
// }
const cArray = (input, expect) => {
    if (!cRequired(input, expect).is)
        return { is: false };
    const res = { is: true, val: input };
    if (!Array.isArray(input)) {
        return { is: false };
    }
    if (!expect.items) {
        return res;
    }
    // items 字段为一个对象的情况, 验证该对象内的字段
    if (is_type_of_1.default.object(expect.items)) {
        for (const item of input) {
            const { is } = check(item, expect.items);
            if (!is) {
                res.is = false;
                return res;
            }
        }
    }
    // items 字段为字符串的情况: array 中的内容是基本类型, 或者为object|array类型但不需要校验内部字段
    if (is_type_of_1.default.string(expect.items)) {
        const check = (func) => () => input.length === input.filter(item => func(item)).length;
        const condition = (0, ramda_1.cond)([
            [(0, ramda_1.equals)('string'), check(is_type_of_1.default.string)],
            [(0, ramda_1.equals)('boolean'), check(is_type_of_1.default.boolean)],
            [(0, ramda_1.equals)('number'), check(is_type_of_1.default.number)],
            [(0, ramda_1.equals)('object'), check(is_type_of_1.default.object)],
            [(0, ramda_1.equals)('array'), check(is_type_of_1.default.array)],
            [ramda_1.T, true]
        ]);
        return { is: condition(expect.items), val: input };
    }
    return res;
};
const check = (input, expect) => {
    // 添加对body参数 nullable 情况的支持
    const r = cNullable(input, expect);
    if (r.is === true)
        return r;
    const condition = (0, ramda_1.cond)([
        [(0, ramda_1.equals)('string'), () => cString(input, expect)],
        [(0, ramda_1.equals)('boolean'), () => cBool(input, expect)],
        [(0, ramda_1.equals)('number'), () => cNum(input, expect)],
        [(0, ramda_1.equals)('object'), () => cObject(input, expect)],
        [(0, ramda_1.equals)('array'), () => cArray(input, expect)],
        [ramda_1.T, () => ({ is: true, val: input })] // 其他类型不做校验，直接返回原数据
    ]);
    return condition(expect.type);
};
const Checker = {
    required: cRequired,
    object: cObject,
    string: cString,
    num: cNum,
    bool: cBool,
    default: cDefault,
    array: cArray,
    check
};
exports.default = Checker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdmFsaWRhdGUvY2hlY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0REFBNEI7QUFDNUIsaUNBQWdEO0FBQ2hELDBEQUFrQztBQVdsQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVUsRUFBRSxTQUFpQixFQUFFLEVBQUUsRUFBRTtJQUNwRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUMxQyxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFFLFNBQWlCLEVBQUUsRUFBRSxFQUFFO0lBQ3BELElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxvQkFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNyQyxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUM7S0FDaEM7SUFDRCxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFVLEVBQUUsU0FBaUIsRUFBRSxFQUFFLEVBQUU7SUFDaEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNwRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNoQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7WUFDMUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0tBQ25CO0lBQ0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBVSxFQUFFLFNBQWlCLEVBQUUsRUFBRSxFQUFFLENBQ25ELE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxTQUFTO0lBQ2pELENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDbkMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFFL0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFRLEVBQUUsTUFBYyxFQUFFLEVBQUU7SUFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRTtRQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDckQsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFO1FBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNoRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUU7UUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ3BFLE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUTtRQUM1QixDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDaEMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ3BCLENBQUMsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBUSxFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQzNDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxPQUFPLElBQUksQ0FBQyxtQkFBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQy9FLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksQ0FBQyxtQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzdFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsbUJBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNuSCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsbUJBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUMvRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLENBQUMsbUJBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDOUUsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxDQUFDLG1CQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBRTlFLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxD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